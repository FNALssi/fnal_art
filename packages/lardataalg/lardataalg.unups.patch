diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6c4c6fe..4f1a8b9 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -13,21 +13,12 @@
 # ======================================================================
 
 
-# use cmake 3.3 or later
-cmake_minimum_required (VERSION 3.3)
-
-project(lardataalg)
-
-# cetbuildtools contains our cmake modules
-SET ( CETBUILDTOOLS_VERSION $ENV{CETBUILDTOOLS_VERSION} )
-IF (NOT CETBUILDTOOLS_VERSION)
-    MESSAGE (FATAL_ERROR "ERROR: setup cetbuildtools to get the cmake modules")
-ENDIF()
-
-set(CMAKE_MODULE_PATH $ENV{CANVAS_ROOT_IO_DIR}/Modules
-		      $ENV{CETBUILDTOOLS_DIR}/Modules
-		      ${CMAKE_MODULE_PATH})
+# use cmake 3.12 or later
+cmake_minimum_required (VERSION 3.12)
 
+project(lardataalg VERSION 08.13.02 LANGUAGES CXX)
+set(fcl_dir job)
+find_package( cetmodules )
 include(CetCMakeEnv)
 cet_cmake_env()
 
@@ -40,12 +31,11 @@ cet_set_compiler_flags(DIAGS CAUTIOUS
 cet_report_compiler_flags()
 
 # these are minimum required versions, not the actual product versions
-find_ups_product( canvas )
-find_ups_product( cetbuildtools )
-find_ups_product( larcoreobj )
-find_ups_product( larcorealg )
-find_ups_product( nusimdata )
-find_ups_root( )
+find_package( ROOT REQUIRED COMPONENTS Core EG Hist)
+find_package(Boost REQUIRED COMPONENTS date_time filesystem graph program_options
+  regex system unit_test_framework)
+find_package( lardataobj REQUIRED)
+find_package( larcorealg REQUIRED)
 
 # macros for artdaq_dictionary and simple_plugin
 include(ArtDictionary)
@@ -58,8 +48,5 @@ add_subdirectory(lardataalg)
 # tests 
 add_subdirectory(test)
 
-# ups - table and config files
-add_subdirectory(ups)
+add_subdirectory(cmakeConfig)
 
-# packaging utility
-include(UseCPack)
diff --git a/cmakeConfig/CMakeLists.txt b/cmakeConfig/CMakeLists.txt
new file mode 100644
index 0000000..e64fd28
--- /dev/null
+++ b/cmakeConfig/CMakeLists.txt
@@ -0,0 +1,2 @@
+# Create package configuration and version files.
+cet_cmake_config(CONFIG_FRAGMENTS lardataalg-fragment.cmake.in)
diff --git a/cmakeConfig/lardataalg-fragment.cmake.in b/cmakeConfig/lardataalg-fragment.cmake.in
new file mode 100644
index 0000000..1ff859f
--- /dev/null
+++ b/cmakeConfig/lardataalg-fragment.cmake.in
@@ -0,0 +1,5 @@
+find_package( ROOT REQUIRED COMPONENTS Core EG Hist)
+find_package(Boost REQUIRED COMPONENTS date_time filesystem graph program_options
+  regex system unit_test_framework)
+find_package( lardataobj REQUIRED)
+find_package( larcorealg REQUIRED)
diff --git a/lardataalg/DetectorInfo/CMakeLists.txt b/lardataalg/DetectorInfo/CMakeLists.txt
index f793d66..d7d1bf4 100644
--- a/lardataalg/DetectorInfo/CMakeLists.txt
+++ b/lardataalg/DetectorInfo/CMakeLists.txt
@@ -3,9 +3,8 @@ cet_make(LIBRARIES larcorealg_Geometry
                    ${MF_MESSAGELOGGER}
                    cetlib_except
                    ${FHICLCPP}
-                   ${ROOT_CORE}
-                   ${ROOT_HIST})
+                   ROOT::Core
+                   ROOT::Hist)
 
 install_headers()
 install_fhicl()
-install_source()
diff --git a/lardataalg/Dumpers/CMakeLists.txt b/lardataalg/Dumpers/CMakeLists.txt
index 1a2a8e2..97da530 100644
--- a/lardataalg/Dumpers/CMakeLists.txt
+++ b/lardataalg/Dumpers/CMakeLists.txt
@@ -1,4 +1,3 @@
 install_headers() 
-install_source() 
 
 add_subdirectory(RawData)
diff --git a/lardataalg/Dumpers/RawData/CMakeLists.txt b/lardataalg/Dumpers/RawData/CMakeLists.txt
index e8ab963..f92a380 100644
--- a/lardataalg/Dumpers/RawData/CMakeLists.txt
+++ b/lardataalg/Dumpers/RawData/CMakeLists.txt
@@ -1,2 +1 @@
 install_headers() 
-install_source() 
diff --git a/lardataalg/MCDumpers/CMakeLists.txt b/lardataalg/MCDumpers/CMakeLists.txt
index 815118a..ffb0d9d 100644
--- a/lardataalg/MCDumpers/CMakeLists.txt
+++ b/lardataalg/MCDumpers/CMakeLists.txt
@@ -1,7 +1,7 @@
 cet_make( LIBRARIES
     nusimdata_SimulationBase
-    ${ROOT_EG}
-    ${ROOT_CORE}
+    ROOT::EG
+    ROOT::Core
   )
 
 install_headers()
diff --git a/lardataalg/Utilities/CMakeLists.txt b/lardataalg/Utilities/CMakeLists.txt
index 15c3893..db7b8e5 100644
--- a/lardataalg/Utilities/CMakeLists.txt
+++ b/lardataalg/Utilities/CMakeLists.txt
@@ -1,2 +1 @@
 install_headers(SUBDIRS "quantities")
-install_source(SUBDIRS "quantities")
diff --git a/test/DetectorInfo/CMakeLists.txt b/test/DetectorInfo/CMakeLists.txt
index e09396a..a95e33d 100644
--- a/test/DetectorInfo/CMakeLists.txt
+++ b/test/DetectorInfo/CMakeLists.txt
@@ -1,3 +1,4 @@
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-sign-compare -Wno-pedantic")
 cet_test( LArPropertiesStandard_test
   LIBRARIES
   lardataalg_DetectorInfo
@@ -87,5 +88,20 @@ cet_test( DetectorPropertiesLArTPCdetector_test
 ##  TEST_ARGS ./dettest_bo.fcl
 ##)
 
-install_source()
+# set FHICL_FILE_PATH and FW_SEARCH_PATH for the case where building without mrb
+# this is not generic, we take advantage of knowing the subdirectories for the fcl and gdml files
+set( mrb_build_dir $ENV{MRB_BUILDDIR} )
+if( NOT mrb_build_dir )
+  #message(STATUS "MRB_BUILDDIR is undefined, set FHICL_FILE_PATH and FW_SEARCH_PATH")
+  set_tests_properties( LArPropertiesStandard_test
+                        LArPropertiesLArTPCdetector_test
+                        LArPropertiesBo_test
+                        DetectorClocksStandard_test
+                        DetectorClocksLArTPCdetector_test
+                        DetectorClocksBo_test
+                        DetectorClocksCSU40L_test
+                        DetectorPropertiesLArTPCdetector_test
+                        PROPERTIES ENVIRONMENT
+                        "FHICL_FILE_PATH=.:${CMAKE_BINARY_DIR}/job:${larcorealg_fcl_dir};FW_SEARCH_PATH=${CMAKE_BINARY_DIR}/gdml:${larcorealg_gdml_dir}" )
+endif()
 install_fhicl()
diff --git a/test/Utilities/CMakeLists.txt b/test/Utilities/CMakeLists.txt
index 0737314..9bc40b3 100644
--- a/test/Utilities/CMakeLists.txt
+++ b/test/Utilities/CMakeLists.txt
@@ -1,4 +1,5 @@
-cet_test(constexpr_math_test)
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-sign-compare -Wno-error=pedantic")
+cet_test(constexpr_math_test USE_BOOST_UNIT)
 cet_test(quantities_test USE_BOOST_UNIT)
 cet_test(quantities_fhicl_test USE_BOOST_UNIT
   LIBRARIES
