commit 97032fc40f06118d0ff7bb7b5e415dea5bb62ab4
Author: Patrick Gartung <gartung@fnal.gov>
Date:   Wed Apr 1 17:07:53 2020 -0500

    Cetmodules

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9be53d4..e0d125f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -14,10 +14,10 @@
 
 
 cmake_minimum_required(VERSION 3.12...3.14 FATAL_ERROR)
-project(art LANGUAGES CXX C)
+project(art VERSION 3.05.00  LANGUAGES CXX C)
 
 # cetbuildtools contains our cmake modules
-find_package(cetbuildtools REQUIRED)
+find_package(cetmodules  REQUIRED)
 
 list(APPEND CMAKE_MODULE_PATH
   ${CMAKE_CURRENT_SOURCE_DIR}/Modules)
@@ -31,56 +31,25 @@
   EXTRA_FLAGS -pedantic
   EXTRA_CXX_FLAGS -Wnon-virtual-dtor -Wdelete-non-virtual-dtor -DBOOST_TEST_NO_OLD_TOOLS)
 
-cet_have_qual(sse2 SSE2)
-if (SSE2)
-  cet_add_compiler_flags(CXX -msse2 -ftree-vectorizer-verbose=2)
-endif()
-
-if($ENV{CET_SANITIZE_ADDRESS})
-  if(NOT "$ENV{GCC_FQ_DIR}" STREQUAL "")
-    find_file(ASAN_LIB libasan.so NO_DEFAULT_PATH PATHS $ENV{GCC_FQ_DIR}/lib64)
-  endif()
-endif()
-
-if($ENV{CET_SANITIZE_THREAD})
-  if(NOT "$ENV{GCC_FQ_DIR}" STREQUAL "")
-    find_file(TSAN_LIB libtsan.so NO_DEFAULT_PATH PATHS $ENV{GCC_FQ_DIR}/lib64)
-  endif()
-endif()
-
-if ($ENV{CET_SANITIZE_ADDRESS})
-cet_add_compiler_flags(CXX -fsanitize=address)
-cet_add_compiler_flags(C -fsanitize=address)
-set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -fsanitize=address")
-set(CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG} -fsanitize=address")
-set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} -fsanitize=address")
-endif()
-
-if ($ENV{CET_SANITIZE_THREAD})
-cet_add_compiler_flags(CXX -fsanitize=thread -D__SANITIZE_THREAD__)
-cet_add_compiler_flags(C -fsanitize=thread -D__SANITIZE_THREAD__)
-set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -fsanitize=thread -D__SANITIZE_THREAD__")
-set(CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG} -fsanitize=thread -D__SANITIZE_THREAD__")
-set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} -fsanitize=thread -D__SANITIZE_THREAD__")
-endif()
-
 cet_report_compiler_flags()
 
 # these are minimum required versions, not the actual product versions
-find_ups_product(canvas v1_06_00)
-find_ups_product(messagefacility)
-find_ups_product(fhiclcpp)
-find_ups_product(cetlib v2_01_00)
-find_ups_product(cetlib_except v1_01_00)
-find_ups_product(clhep)
-find_ups_product(cppunit)
-find_ups_product(hep_concurrency)
-find_ups_product(sqlite)
-find_ups_product(range)
-find_ups_boost(BOOST_TARGETS)
 
-# SQLite
-cet_find_library(SQLITE3 NAMES sqlite3_ups PATHS ENV SQLITE_LIB NO_DEFAULT_PATH)
+find_package(CLHEP REQUIRED COMPONENTS Matrix Vector Random)
+find_package(Boost REQUIRED
+  COMPONENTS date_time filesystem graph program_options
+  regex system unit_test_framework)
+find_package(TBB REQUIRED)
+
+find_library(SQLITE3 NAMES sqlite3 REQUIRED)
+
+#These have to happend after to avoid calling find_package(TBB) twice
+find_package(hep_concurrency REQUIRED)
+find_package(cetlib_except REQUIRED)
+find_package(cetlib REQUIRED)
+find_package(canvas REQUIRED)
+find_package(fhiclcpp REQUIRED)
+find_package(messagefacility REQUIRED)
 
 # macros for simple_plugin
 include(BuildPlugins)
@@ -94,11 +63,9 @@
 # source
 add_subdirectory(art)
 
-# ups - table and config files
-add_subdirectory(ups)
-
 # CMake modules
 add_subdirectory(Modules)
 
-# packaging utility
-include(UseCPack)
+# ups - table and config files
+add_subdirectory(cmakeConfig)
+
diff --git a/Modules/BuildPlugins.cmake b/Modules/BuildPlugins.cmake
index 3fca484..cc55a70 100644
--- a/Modules/BuildPlugins.cmake
+++ b/Modules/BuildPlugins.cmake
@@ -24,6 +24,7 @@ include(BasicPlugin)
 
 cmake_policy(PUSH)
 cmake_policy(VERSION 3.3)
+find_package(Boost QUIET REQUIRED COMPONENTS filesystem)
 
 macro (_sp_debug_message)
   string(TOUPPER ${CMAKE_BUILD_TYPE} BTYPE_UC)
@@ -73,26 +74,10 @@ function(simple_plugin name type)
       art_Framework_IO_Sources
       Boost::filesystem)
   endif()
-  check_ups_version(cetbuildtools ${cetbuildtools_UPS_VERSION} v4_05_00 PRODUCT_MATCHES_VAR BP_HAS_SOURCE)
   if(SP_SOURCE)
-    if (BP_HAS_SOURCE)
-      list(INSERT SP_SOURCE 0 SOURCE)
-    else()
-      message(FATAL_ERROR "SOURCE option specified, but not supported by cetbuildtools ${CETBUILDTOOLS_VERSION}")
-    endif()
+    list(INSERT SP_SOURCE 0 SOURCE)
   endif()
-  check_ups_version(cetbuildtools ${cetbuildtools_UPS_VERSION} v4_06_00 PRODUCT_MATCHES_VAR BP_HAS_NOP)
-  if (BP_HAS_NOP AND NOT SP_NOP)
-    # Set it anyway so we have a good separator.
-    set(SP_NOP TRUE)
-  elseif(SP_NOP AND NOT BP_HAS_NOP)
-    # Not a problem, it's already done its job.
-    unset(SP_NOP)
-  endif()
-  if (SP_NOP)
-    set (NOP_ARG NOP)
-  endif()
-  basic_plugin(${name} ${type} ${NOP_ARG} ${simple_plugin_liblist} ${ARGN} ${SP_SOURCE})
+  basic_plugin(${name} ${type} NOP ${simple_plugin_liblist} ${ARGN} ${SP_SOURCE})
 endfunction(simple_plugin name type)
 
 cmake_policy(POP)
diff --git a/Modules/CMakeLists.txt b/Modules/CMakeLists.txt
index d77f658..0a79d57 100644
--- a/Modules/CMakeLists.txt
+++ b/Modules/CMakeLists.txt
@@ -1,4 +1,4 @@
 INSTALL(FILES
   ArtMake.cmake
   BuildPlugins.cmake
-  DESTINATION ${product}/${version}/Modules)
+  DESTINATION Modules)
diff --git a/art/Framework/Core/CMakeLists.txt b/art/Framework/Core/CMakeLists.txt
index 4967dde..4949e9d 100644
--- a/art/Framework/Core/CMakeLists.txt
+++ b/art/Framework/Core/CMakeLists.txt
@@ -14,9 +14,7 @@ art_make(
   fhiclcpp
   canvas
   cetlib
-  hep_concurrency
-  ${CLHEP}
-  ${TBB})
+  hep_concurrency)
 
 install_headers(SUBDIRS detail)
 install_source(SUBDIRS detail)
diff --git a/art/Framework/Services/Optional/CMakeLists.txt b/art/Framework/Services/Optional/CMakeLists.txt
index ce4e0d4..d22063e 100644
--- a/art/Framework/Services/Optional/CMakeLists.txt
+++ b/art/Framework/Services/Optional/CMakeLists.txt
@@ -7,7 +7,7 @@ endif()
 simple_plugin(RandomNumberGenerator "service"
   art_Framework_Principal
   art_Persistency_Common
-  ${CLHEP})
+  CLHEP::Random)
 
 basic_plugin(MemoryTracker "service"
   art_Framework_Principal
@@ -18,7 +18,7 @@ basic_plugin(MemoryTracker "service"
 
 simple_plugin(TimeTracker "service"
   art_Framework_Principal
-  ${TBB}
+  TBB::tbb
   ${SQLITE3})
 
 simple_plugin(Tracer "service" art_Framework_Principal MF_MessageLogger)
diff --git a/art/Persistency/Provenance/CMakeLists.txt b/art/Persistency/Provenance/CMakeLists.txt
index f498ae3..98d7c3d 100644
--- a/art/Persistency/Provenance/CMakeLists.txt
+++ b/art/Persistency/Provenance/CMakeLists.txt
@@ -2,7 +2,7 @@ art_make(SUBDIRS detail
   LIB_LIBRARIES
   art_Utilities
   canvas
-  ${TBB}
+  TBB::tbb
   )
 
 install_headers(SUBDIRS detail)
diff --git a/art/Utilities/forceRootDynamicPathRescan.h b/art/Utilities/forceRootDynamicPathRescan.h
new file mode 100644
index 0000000..7027ddc
--- /dev/null
+++ b/art/Utilities/forceRootDynamicPathRescan.h
@@ -0,0 +1,40 @@
+#ifndef art_Utilities_forceRootDynamicPathRescan_h
+#define art_Utilities_forceRootDynamicPathRescan_h
+////////////////////////////////////////////////////////////////////////
+// forceRootDynamicPathRescan()
+//
+// This function should be called whenever it is necessary to tell Root
+// to re-obtain its cached DynamicPath from the environment. This may be
+// necessary in an art suite (say) plugin constructor which relies on
+// Root finding dictionaries in a directory which is not added to
+// (DY)LD_LIBRARY_PATH until after Root is initialized.
+//
+// N.B. This does not introduce a Root link dependence to
+// libart_Utilities, only to the first library calling this function
+// (however indirectly) from a compile unit.
+//
+// 2018-05-29 CHG.
+////////////////////////////////////////////////////////////////////////
+#include "TROOT.h"
+#include "TSystem.h"
+
+namespace art {
+  void forceRootDynamicPathRescan();
+}
+
+inline
+void art::forceRootDynamicPathRescan()
+{
+  // FIXME: Disabled pending Root investigations of issue with
+  // gInterpreter->RescanLibraryMap().
+  //
+  // if (ROOT::Internal::gROOTLocal) {
+  //   gSystem->SetDynamicPath(nullptr);
+  //   gInterpreter->RescanLibraryMap();
+  // }
+}
+#endif /* art_Utilities_forceRootDynamicPathRescan_h */
+
+// Local Variables:
+// mode: c++
+// End:
diff --git a/art/Version/GetReleaseVersion.cc.in b/art/Version/GetReleaseVersion.cc.in
index 848363b..cdf55b6 100644
--- a/art/Version/GetReleaseVersion.cc.in
+++ b/art/Version/GetReleaseVersion.cc.in
@@ -4,7 +4,7 @@
 namespace art {
 
   std::string const & getReleaseVersion() {
-    static std::string const releaseVersion("@version@");
+    static std::string const releaseVersion("@PROJECT_VERSION@");
     return releaseVersion;
   }
 
diff --git a/art/test/Framework/Services/System/CMakeLists.txt b/art/test/Framework/Services/System/CMakeLists.txt
index 0f15f12..c6a3865 100644
--- a/art/test/Framework/Services/System/CMakeLists.txt
+++ b/art/test/Framework/Services/System/CMakeLists.txt
@@ -8,4 +8,3 @@ cet_test(FloatingPointControl_t
   art_Framework_Services_Registry
   fhiclcpp)
 
-target_include_directories(FloatingPointControl_t PUBLIC $ENV{CATCH_INC})
diff --git a/art/test/Utilities/CMakeLists.txt b/art/test/Utilities/CMakeLists.txt
index d874569..c56f5c3 100644
--- a/art/test/Utilities/CMakeLists.txt
+++ b/art/test/Utilities/CMakeLists.txt
@@ -13,7 +13,7 @@ add_subdirectory(tools)
 cet_test(make_tool_t USE_BOOST_UNIT LIBRARIES ${default_art_test_libraries})
 
 cet_test(ParameterSet_get_CLHEP_t
-  LIBRARIES ${default_art_test_libraries} ${CLHEP}
+  LIBRARIES ${default_art_test_libraries} CLHEP::Matrix CLHEP::Vector
   )
 
 cet_test(pointersEqual_t USE_BOOST_UNIT
diff --git a/art/test/Version/test_GetReleaseVersion.cpp.in b/art/test/Version/test_GetReleaseVersion.cpp.in
index 222dac6..24aea4a 100644
--- a/art/test/Version/test_GetReleaseVersion.cpp.in
+++ b/art/test/Version/test_GetReleaseVersion.cpp.in
@@ -3,5 +3,5 @@
 
 int main()
 {
-  assert(art::getReleaseVersion() == std::string("@version@"));
+  assert(art::getReleaseVersion() == std::string("@PROJECT_VERSION@"));
 }
diff --git a/cmakeConfig/CMakeLists.txt b/cmakeConfig/CMakeLists.txt
new file mode 100644
index 0000000..7a1c253
--- /dev/null
+++ b/cmakeConfig/CMakeLists.txt
@@ -0,0 +1,2 @@
+# Create package configuration and version files.
+cet_cmake_config(CONFIG_FRAGMENTS art-fragment.cmake.in)
diff --git a/cmakeConfig/art-fragment.cmake.in b/cmakeConfig/art-fragment.cmake.in
new file mode 100644
index 0000000..7de916f
--- /dev/null
+++ b/cmakeConfig/art-fragment.cmake.in
@@ -0,0 +1,9 @@
+find_package(CLHEP COMPONENTS Vector Random REQUIRED)
+find_package(Boost COMPONENTS date_time graph program_options
+  regex system REQUIRED)
+find_package(hep_concurrency REQUIRED)
+find_package(cetlib_except REQUIRED)
+find_package(cetlib REQUIRED)
+find_package(canvas REQUIRED)
+find_package(fhiclcpp REQUIRED)
+find_package(messagefacility REQUIRED)
diff --git a/tools/sqlite/memoryTracker/CMakeLists.txt b/tools/sqlite/memoryTracker/CMakeLists.txt
index 3b64e27..60504fe 100644
--- a/tools/sqlite/memoryTracker/CMakeLists.txt
+++ b/tools/sqlite/memoryTracker/CMakeLists.txt
@@ -8,4 +8,4 @@ install(FILES
   max-vsize-events.sql
   max-vsize-modules.sql
   peak-summary.sql
-  DESTINATION "${product}/${version}/tools/sqlite/memoryTracker")
+  DESTINATION "tools/sqlite/memoryTracker")
diff --git a/tools/sqlite/timeTracker/CMakeLists.txt b/tools/sqlite/timeTracker/CMakeLists.txt
index 5a589c4..ac928e0 100644
--- a/tools/sqlite/timeTracker/CMakeLists.txt
+++ b/tools/sqlite/timeTracker/CMakeLists.txt
@@ -2,4 +2,4 @@ install(FILES
   event-summary.sql
   max-events.sql
   module-summary.sql
-  DESTINATION "${product}/${version}/tools/sqlite/timeTracker")
+  DESTINATION "tools/sqlite/timeTracker")
