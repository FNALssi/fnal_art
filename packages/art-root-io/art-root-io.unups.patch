diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2517ae5..a45db98 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -14,17 +14,14 @@
 
 
 # use cmake 3.11 or later
-cmake_minimum_required (VERSION 3.11)
+cmake_minimum_required (VERSION 3.12...3.14 FATAL_ERROR)
 
-project(art_root_io)
+project(art_root_io VERSION 1.02.01 LANGUAGES C CXX)
 
-# cetbuildtools contains our cmake modules
-find_package(cetbuildtools 7.13.01 REQUIRED)
+# cetmodules contains our cmake modules
+find_package(cetmodules 1.01.01 REQUIRED)
 
-list(APPEND CMAKE_MODULE_PATH
-  $ENV{CANVAS_ROOT_IO_DIR}/Modules
-  $ENV{ART_DIR}/Modules
-  ${CMAKE_CURRENT_SOURCE_DIR}/Modules)
+list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/Modules)
 
 include(CetCMakeEnv)
 cet_cmake_env()
@@ -35,59 +32,23 @@ cet_set_compiler_flags(DIAGS VIGILANT
   EXTRA_FLAGS -pedantic
   EXTRA_CXX_FLAGS -Wnon-virtual-dtor -Wdelete-non-virtual-dtor -DBOOST_TEST_NO_OLD_TOOLS)
 
-cet_have_qual(sse2 SSE2)
-if (SSE2)
-  cet_add_compiler_flags(CXX -msse2 -ftree-vectorizer-verbose=2)
-endif()
-
-if($ENV{CET_SANITIZE_ADDRESS})
-  if(NOT "$ENV{GCC_FQ_DIR}" STREQUAL "")
-    find_file(ASAN_LIB libasan.so NO_DEFAULT_PATH PATHS $ENV{GCC_FQ_DIR}/lib64)
-  endif()
-endif()
-
-if($ENV{CET_SANITIZE_THREAD})
-  if(NOT "$ENV{GCC_FQ_DIR}" STREQUAL "")
-    find_file(TSAN_LIB libtsan.so NO_DEFAULT_PATH PATHS $ENV{GCC_FQ_DIR}/lib64)
-  endif()
-endif()
-
-if ($ENV{CET_SANITIZE_ADDRESS})
-cet_add_compiler_flags(CXX -fsanitize=address)
-cet_add_compiler_flags(C -fsanitize=address)
-set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -fsanitize=address")
-set(CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG} -fsanitize=address")
-set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} -fsanitize=address")
-endif()
-
-if ($ENV{CET_SANITIZE_THREAD})
-cet_add_compiler_flags(CXX -fsanitize=thread -D__SANITIZE_THREAD__)
-cet_add_compiler_flags(C -fsanitize=thread -D__SANITIZE_THREAD__)
-set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -fsanitize=thread -D__SANITIZE_THREAD__")
-set(CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG} -fsanitize=thread -D__SANITIZE_THREAD__")
-set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} -fsanitize=thread -D__SANITIZE_THREAD__")
-endif()
-
 cet_report_compiler_flags()
 
 # these are minimum required versions, not the actual product versions
-find_ups_product(art)
-find_ups_product(canvas_root_io)
-find_ups_product(canvas)
-find_ups_product(messagefacility)
-find_ups_product(fhiclcpp)
-find_ups_product(cetlib)
-find_ups_product(cetlib_except)
-find_ups_product(clhep)
-find_ups_product(cppunit)
-find_ups_product(hep_concurrency)
-find_ups_product(sqlite)
-find_ups_boost(BOOST_TARGETS)
-find_ups_root()
-find_ups_product(catch)
+find_package(hep_concurrency REQUIRED)
+find_package(cetlib_except REQUIRED)
+find_package(cetlib REQUIRED)
+find_package(fhiclcpp REQUIRED)
+find_package(messagefacility REQUIRED)
+find_package(canvas REQUIRED)
+find_package(canvas_root_io REQUIRED)
+find_package(art REQUIRED)
+find_package(ROOT REQUIRED COMPONENTS)
+find_package(Boost REQUIRED COMPONENTS date_time filesystem program_options)
+find_package(Catch2 REQUIRED)
 
 # SQLite
-cet_find_library(SQLITE3 NAMES sqlite3_ups PATHS ENV SQLITE_LIB NO_DEFAULT_PATH)
+cet_find_library(SQLITE3 NAMES sqlite3 REQUIRED)
 
 # macros for making art libraries/dictionaries, etc. and plugins
 include(ArtMake)
@@ -97,10 +58,7 @@ include(BuildPlugins)
 add_subdirectory(art_root_io)
 
 # ups - table and config files
-add_subdirectory(ups)
+add_subdirectory(cmakeConfig)
 
 # tools - migration scripts
 add_subdirectory(tools)
-
-# packaging utility
-include(UseCPack)
diff --git a/art_root_io/CMakeLists.txt b/art_root_io/CMakeLists.txt
index 34c7624..1e69bac 100644
--- a/art_root_io/CMakeLists.txt
+++ b/art_root_io/CMakeLists.txt
@@ -4,6 +4,9 @@ art_dictionary()
 
 add_subdirectory(RootDB)
 
+find_package(ROOT QUIET REQUIRED
+  COMPONENTS Core RIO Tree Hist Thread)
+
 art_make_library(
   LIBRARY_NAME art_root_io_detail
   SOURCE
@@ -147,6 +150,5 @@ cet_make_completions(count_events)
 cet_make_completions(file_info_dumper)
 
 install_headers(SUBDIRS detail)
-install_source(SUBDIRS detail)
 
 add_subdirectory(test)
diff --git a/art_root_io/RootDB/CMakeLists.txt b/art_root_io/RootDB/CMakeLists.txt
index fb6110e..698ccfb 100644
--- a/art_root_io/RootDB/CMakeLists.txt
+++ b/art_root_io/RootDB/CMakeLists.txt
@@ -1,3 +1,5 @@
+find_package(ROOT QUIET REQUIRED COMPONENTS RIO Core)
+
 art_make_library(LIBRARY_NAME
   art_root_io_RootDB
   SOURCE
@@ -18,4 +20,3 @@ art_make_library(LIBRARY_NAME
   ${SQLITE3})
 
 install_headers()
-install_source()
diff --git a/art_root_io/test/CMakeLists.txt b/art_root_io/test/CMakeLists.txt
index a8de4e1..3071a64 100644
--- a/art_root_io/test/CMakeLists.txt
+++ b/art_root_io/test/CMakeLists.txt
@@ -2,6 +2,8 @@ cet_enable_asserts()
 
 include(CetTest)
 
+find_package(ROOT QUIET REQUIRED COMPONENTS Graf)
+
 cet_make_library(LIBRARY_NAME art_root_io_test_TH1Data
   SOURCE TH1Data.cc
   LIBRARIES ROOT::Hist ROOT::Core
diff --git a/cmakeConfig/CMakeLists.txt b/cmakeConfig/CMakeLists.txt
new file mode 100644
index 0000000..525fcaf
--- /dev/null
+++ b/cmakeConfig/CMakeLists.txt
@@ -0,0 +1,2 @@
+# create package configuration and version files
+cet_cmake_config(CONFIG_FRAGMENTS art_root_io-fragment.cmake.in)
diff --git a/cmakeConfig/art_root_io-fragment.cmake.in b/cmakeConfig/art_root_io-fragment.cmake.in
new file mode 100644
index 0000000..4e94f94
--- /dev/null
+++ b/cmakeConfig/art_root_io-fragment.cmake.in
@@ -0,0 +1,11 @@
+find_package(hep_concurrency REQUIRED)
+find_package(cetlib_except REQUIRED)
+find_package(cetlib REQUIRED)
+find_package(fhiclcpp REQUIRED)
+find_package(messagefacility REQUIRED)
+find_package(canvas REQUIRED)
+find_package(canvas_root_io REQUIRED)
+find_package(art REQUIRED)
+find_package(ROOT REQUIRED COMPONENTS)
+find_package(Boost REQUIRED COMPONENTS filesystem)
+cet_find_library(SQLITE3 NAMES sqlite3 REQUIRED)
