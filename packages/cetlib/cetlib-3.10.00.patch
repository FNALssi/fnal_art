--- CMakeLists.txt.orig	2020-03-02 13:50:53.000000000 -0600
+++ CMakeLists.txt	2020-04-22 13:54:04.829876000 -0500
@@ -12,11 +12,11 @@
 #  make package (builds distribution tarfile)
 # ======================================================================
 
-cmake_minimum_required(VERSION 3.12...3.14 FATAL_ERROR)
-project(cetlib LANGUAGES CXX C)
+cmake_minimum_required(VERSION 3.12)
+project(cetlib VERSION 3.10.00 LANGUAGES CXX C)
 
 # cetbuildtools contains our cmake modules
-find_package(cetbuildtools REQUIRED)
+find_package(cetmodules REQUIRED)
 
 include(CetCMakeEnv)
 cet_cmake_env()
@@ -28,51 +28,21 @@
   EXTRA_CXX_FLAGS -Wnon-virtual-dtor -Wdelete-non-virtual-dtor -DBOOST_TEST_NO_OLD_TOOLS
   )
 
-if($ENV{CET_SANITIZE_ADDRESS})
-  if(NOT "$ENV{GCC_FQ_DIR}" STREQUAL "")
-    find_file(ASAN_LIB libasan.so NO_DEFAULT_PATH PATHS $ENV{GCC_FQ_DIR}/lib64)
-  endif()
-endif()
-
-if($ENV{CET_SANITIZE_THREAD})
-  if(NOT "$ENV{GCC_FQ_DIR}" STREQUAL "")
-    find_file(TSAN_LIB libtsan.so NO_DEFAULT_PATH PATHS $ENV{GCC_FQ_DIR}/lib64)
-  endif()
-endif()
-
-if ($ENV{CET_SANITIZE_ADDRESS})
-cet_add_compiler_flags(CXX -fsanitize=address)
-cet_add_compiler_flags(C -fsanitize=address)
-set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -fsanitize=address")
-set(CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG} -fsanitize=address")
-set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} -fsanitize=address")
-endif()
-
-if ($ENV{CET_SANITIZE_THREAD})
-cet_add_compiler_flags(CXX -fsanitize=thread -D__SANITIZE_THREAD__)
-cet_add_compiler_flags(C -fsanitize=thread -D__SANITIZE_THREAD__)
-set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -fsanitize=thread -D__SANITIZE_THREAD__")
-set(CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG} -fsanitize=thread -D__SANITIZE_THREAD__")
-set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} -fsanitize=thread -D__SANITIZE_THREAD__")
-endif()
-
 cet_report_compiler_flags()
 
 # ----------------------------------------------------------------------
 # Describe build prerequisites:
 
-find_ups_boost(BOOST_TARGETS v1_50_0)
-find_ups_product(sqlite)
-find_ups_product(cetlib_except v1_01_00)
-find_ups_product(catch v1_11_0)
-find_ups_product(hep_concurrency)
+find_package(Boost 1.50.0 REQUIRED COMPONENTS filesystem regex)
+find_library(SQLITE3 NAMES sqlite3 REQUIRED)
+find_package(cetlib_except 1.01.00 REQUIRED)
+find_package(Catch2 2.3.0 REQUIRED)
+find_package(hep_concurrency REQUIRED)
 
-# SQLite
-cet_find_library(SQLITE3 NAMES sqlite3_ups PATHS ENV SQLITE_LIB NO_DEFAULT_PATH)
 # find openSSL
 # when building on macOS, use CommonCrypto
 if(NOT APPLE)
-  find_package(OpenSSL REQUIRED )
+  find_package(OpenSSL REQUIRED)
 endif()
 
 # ----------------------------------------------------------------------
@@ -80,12 +50,4 @@
 
 add_subdirectory( ${PROJECT_NAME} )  # source code
 add_subdirectory( perllib )          # Modular plugin skeleton generator
-add_subdirectory( ups )              # ups files
-
-# ----------------------------------------------------------------------
-# Packaging utility
-
-include(UseCPack)
-
-#
-# ======================================================================
+add_subdirectory( cmakeConfig )              # cmakeConfig files
