diff --git a/CMakeLists.txt b/CMakeLists.txt
index be09cdc..40488dd 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -12,62 +12,46 @@
 #  make install
 #  make package (builds distribution tarfile)
 # ======================================================================
+cmake_minimum_required(VERSION 3.19 FATAL_ERROR)
 
-cmake_minimum_required(VERSION 3.18.2 FATAL_ERROR)
 
+find_package(cetmodules 2.29.06 REQUIRED)
 project(nutools VERSION 3.11.06 LANGUAGES CXX)
 
-# cetbuildtools contains our cmake modules
-find_package(cetbuildtools REQUIRED)
-
 include(CetCMakeEnv)
 cet_cmake_env()
 
+# Find our own CMake modules, and tell everyone else where to find them.
+cet_cmake_module_directories(Modules)
+
 # -D_GLIBCXX_USE_NANOSLEEP is needed to make std::this_thread::sleep_for available. (IFDatabase)
 cet_set_compiler_flags(DIAGS CAUTIOUS WERROR
                        NO_UNDEFINED
-                       EXTRA_FLAGS -pedantic
-                       EXTRA_CXX_FLAGS -D_GLIBCXX_USE_NANOSLEEP
-                                       -Wno-unused-local-typedefs -Wno-variadic-macros)
-cet_report_compiler_flags()
-
-# these are minimum required versions, not the actual product versions
-find_ups_product( art )
-find_ups_product( art_root_io )
-find_ups_product( canvas_root_io )
-find_ups_product( nusimdata )
-find_ups_product( clhep )
-find_ups_product( cetlib )
-find_ups_product( cetlib_except )
-find_ups_root()
-
-message(STATUS "ROOTSYS is ${ROOTSYS}")
+                       EXTRA_FLAGS -pedantic 
+                                   $<$<COMPILE_LANGUAGE:CXX>:-D_GLIBCXX_USE_NANOSLEEP 
+                                   -Wno-unused-local-typedefs -Wno-variadic-macros>)
+cet_report_compiler_flags(REPORT_THRESHOLD VERBOSE)
+
+find_package(art REQUIRED)
+find_package(art_root_io REQUIRED)
+find_package(canvas_root_io REQUIRED)
+find_package(nusimdata REQUIRED)
+find_package(cetlib REQUIRED)
+find_package(cetlib_except REQUIRED)
+find_package(CLHEP REQUIRED)
 
-## find_library directives
-# other dependencies
-cet_find_library( CRY NAMES CRY PATHS ENV CRY_LIB NO_DEFAULT_PATH )
-
-# macros
 include(ArtMake)
 include(BuildPlugins)
 include(CetRootCint)
 
-# include search path
-include_directories ( $ENV{CRYHOME}/src )
-
-# included for Mac OSX using XQuartz for X11
-if(APPLE)
-  include_directories ( /opt/X11/include )
-endif()
-
 # source
 add_subdirectory (nutools)
 add_subdirectory (tools)
 add_subdirectory (bundle)
+add_subdirectory (Modules)
 
 # ups - table and config files
-add_subdirectory(ups)
 
 # packaging utility
-include(UseCPack)
 
+cet_cmake_config()
diff --git a/Modules/CMakeLists.txt b/Modules/CMakeLists.txt
new file mode 100644
index 0000000..736f2bd
--- /dev/null
+++ b/Modules/CMakeLists.txt
@@ -0,0 +1,2 @@
+install(DIRECTORY ./ DESTINATION Modules
+  FILES_MATCHING PATTERN "*.cmake" PATTERN "[.#]*.cmake" EXCLUDE)
diff --git a/Modules/FindCRY.cmake b/Modules/FindCRY.cmake
new file mode 100644
index 0000000..e5cad53
--- /dev/null
+++ b/Modules/FindCRY.cmake
@@ -0,0 +1,56 @@
+#[================================================================[.rst:
+FindCRY
+----------
+
+Finds CRY library and headers
+
+Imported Targets
+^^^^^^^^^^^^^^^^
+
+This module provides the following imported targets, if found:
+
+``CRY::CRY``
+  The CRY library
+
+
+#]================================================================]
+# headers
+find_file(_cet_CRYSetup_h NAMES CRYSetup.h HINTS ENV CRYHOME 
+  PATH_SUFFIXES src)
+if (_cet_CRYSetup_h)
+  get_filename_component(_cet_CRY_include_dir "${_cet_CRYSetup_h}" PATH)
+  if (_cet_CRY_include_dir STREQUAL "/")
+    unset(_cet_CRY_include_dir)
+  endif()
+endif()
+if (EXISTS "${_cet_CRY_include_dir}")
+  set(CRY_FOUND TRUE)
+  get_filename_component(_cet_CRY_dir "${_cet_CRY_include_dir}" PATH)
+  if (_cet_CRY_dir STREQUAL "/")
+    unset(_cet_CRY_dir)
+  endif()
+  set(CRY_INCLUDE_DIRS "${_cet_CRY_include_dir}")
+  set(CRY_LIBRARY_DIR "${_cet_CRY_dir}/lib}")
+endif()
+if (CRY_FOUND)
+  find_library(CRY_LIBRARY NAMES CRY PATHS ${CRY_LIBRARY_DIR})
+  if (NOT TARGET CRY::CRY)
+    add_library(CRY::CRY SHARED IMPORTED)
+    set_target_properties(CRY::CRY PROPERTIES
+      INTERFACE_INCLUDE_DIRECTORIES "${CRY_INCLUDE_DIRS}"
+      IMPORTED_LOCATION "${CRY_LIBRARY}"
+      )
+  endif()
+endif()
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(CRY
+  REQUIRED_VARS CRY_FOUND
+  CRY_INCLUDE_DIRS
+  CRY_LIBRARY)
+
+unset(_cet_CRY_FIND_REQUIRED)
+unset(_cet_CRY_dir)
+unset(_cet_CRY_include_dir)
+unset(_cet_CRYSetup_h CACHE)
+
diff --git a/nutools/EventGeneratorBase/CRY/CMakeLists.txt b/nutools/EventGeneratorBase/CRY/CMakeLists.txt
index 021ae89..23b1861 100644
--- a/nutools/EventGeneratorBase/CRY/CMakeLists.txt
+++ b/nutools/EventGeneratorBase/CRY/CMakeLists.txt
@@ -1,16 +1,23 @@
 
-art_make( LIB_LIBRARIES nusimdata::SimulationBase
-                        CRY
+find_package(ROOT COMPONENTS Geom GeomPainter Core EG REQUIRED)
+find_package(CRY)
+
+cet_make_library(SOURCE CRYHelper.cxx
+                 HEADERS_TARGET
+                 LIBRARIES PRIVATE
+                        CRY::CRY
+                        nusimdata::SimulationBase
+                        art::Framework_Services_Registry
                         messagefacility::MF_MessageLogger
-                        
                         fhiclcpp::fhiclcpp
                         cetlib::cetlib
 			cetlib_except::cetlib_except
                         ROOT::Geom
                         ROOT::GeomPainter
 			ROOT::EG
-                        ${ROOT_BASIC_LIB_LIST} )
-
+                        ROOT::Core
+                        CLHEP::CLHEP
+                        )
 
 install_headers()
 install_fhicl()
diff --git a/tools/CMakeLists.txt b/tools/CMakeLists.txt
index 8ae01eb..336e448 100644
--- a/tools/CMakeLists.txt
+++ b/tools/CMakeLists.txt
@@ -3,19 +3,13 @@ macro( _nu_install_tools )
   cmake_parse_arguments( NT "" "DIRNAME" "SCRIPT_LIST" ${ARGN})
   if( NT_DIRNAME )
     install( PROGRAMS ${NT_SCRIPT_LIST}
-             DESTINATION "${product}/${version}/tools/${NT_DIRNAME}" )
+             DESTINATION "tools/${NT_DIRNAME}" )
   else()
     install( PROGRAMS ${NT_SCRIPT_LIST}
-             DESTINATION "${product}/${version}/tools" )
+             DESTINATION "tools" )
   endif()
 endmacro( _nu_install_tools )
 
 add_subdirectory (refactor)
 add_subdirectory (nutools3)
 
-# This is for users NOT using mrb or cetbuildtools in their build system
-CONFIGURE_FILE ( ${CMAKE_CURRENT_SOURCE_DIR}/setup_cetbuildtools.csh.in
-                 ${CMAKE_CURRENT_BINARY_DIR}/setup_cetbuildtools.csh @ONLY )
-CONFIGURE_FILE ( ${CMAKE_CURRENT_SOURCE_DIR}/setup_cetbuildtools.sh.in
-                 ${CMAKE_CURRENT_BINARY_DIR}/setup_cetbuildtools.sh @ONLY )
-install_scripts( LIST ${CMAKE_CURRENT_BINARY_DIR}/setup_cetbuildtools.csh ${CMAKE_CURRENT_BINARY_DIR}/setup_cetbuildtools.sh )
diff --git a/tools/cetbuildtools8/update_cmake_cetb8.pl b/tools/cetbuildtools8/update_cmake_cetb8.pl
index 9e2c0c9..6a72103 100755
--- a/tools/cetbuildtools8/update_cmake_cetb8.pl
+++ b/tools/cetbuildtools8/update_cmake_cetb8.pl
@@ -6,21 +6,26 @@ BEGIN { %dir_list = (
         "art_Persistency_Provenance" => "art::Persistency_Provenance",
         "art_Framework_Principal" => "art::Framework_Principal",
         "art_Framework_Services_Registry" => "art::Framework_Services_Registry",
+        "ART_FRAMEWORK_SERVICES_REGISTRY" => "art::Framework_Services_Registry",
         "art_Framework_Services_Optional_RandomNumberGenerator_service" => "art::Framework_Services_Optional_RandomNumberGenerator_service",
         "art_Framework_IO_ProductMix" => "art::Framework_IO_ProductMix",
         "art_Utilities" => "art::Utilities",
         "MF_MessageLogger"  => "messagefacility::MF_MessageLogger",
+        "MF_MESSAGELOGGER"  => "messagefacility::MF_MessageLogger",
+        "FHICLCPP" => "fhiclcpp::fhiclcpp",
         "canvas" => "canvas::canvas",
         "cetlib" => "cetlib::cetlib",
         "cetlib_except" => "cetlib_except::cetlib_except",
         "lardata_Utilities_LArPropertiesServiceArgoNeuT_service" => "ArgoneutUtilities_LArPropertiesServiceArgoNeuT_service",
         "lardata_Utilities_DetectorPropertiesServiceArgoNeuT_service" => "ArgoneutUtilities_DetectorPropertiesServiceArgoNeuT_service",
+        "GeometryTestLib" => "larcorealg::GeometryTestLib",
         "nusimdata_SimulationBase" => "nusimdata::SimulationBase"
                        ); }
 
 foreach my $lib (sort keys %dir_list) {
    next if m&add_subdirectory&i;
    next if m&find_ups_product&i;
+   next if m&cet_find_library&i;
    next if m&simple_plugin&i;
    next if m&create_version_variables&i;
    next if m&SUBDIRNAME&i;
@@ -41,20 +46,27 @@ s&\$\{ART_FRAMEWORK_IO_SOURCES\}&art::Framework_IO_Sources&;
 s&\$\{ART_FRAMEWORK_PRINCIPAL\}&art::Framework_Principal&;
 s&\$\{ART_FRAMEWORK_SERVICES_REGISTRY\}&art::Framework_Services_Registry&;
 s&\$\{ART_PERSISTENCY_COMMON\}&art::Persistency_Common&;
+s&\$\{ART_PERSISTENCY_PROVENANCE\}&art::Persistency_Provenance&;
+s&\$\{ART_UTILITIES\}&art::Utilities&;
 s&\$\{ART_ROOT_IO\}&art_root_io::art_root_io&;
 s&\$\{ART_ROOT_IO_ROOTINPUT_SOURCE\}&art_root_io::RootInput_source&;
 s&\$\{ART_ROOT_IO_TFILESERVICE_SERVICE\}&art_root_io::TFileService_service&;
 s&\$\{ART_ROOT_IO_TFILE_SUPPORT\}&art_root_io::tfile_support&;
 s&\$\{BOOST_DATE_TIME\}&Boost::date_time&;
 s&\$\{BOOST_FILESYSTEM\}&Boost::filesystem&;
+s&\$\{Boost_FILESYSTEM_LIBRARY\}&Boost::filesystem&;
 s&\$\{BOOST_REGEX\}&Boost::regex&;
-s&\$\{BOOST_SYSTEM\}&&; # No longer needed
+s&\$\{BOOST_SYSTEM\}&&; # No longer exists
+s&\$\{Boost_SYSTEM_LIBRARY\}&&; # No longer exists
 s&\$\{BOOST_THREAD\}&Boost::thread&;
+s&\$\{CANVAS\}&canvas::canvas&;
 s&\$\{CETLIB\}&cetlib::cetlib&;
 s&\$\{CETLIB_EXCEPT\}&cetlib_except::cetlib_except&;
 s&\$\{FHICLCPP\}&fhiclcpp::fhiclcpp&;
 s&\$\{MF_MESSAGELOGGER\}&messagefacility::MF_MessageLogger&;
 s&\$\{MF_UTILITIES\}&&; # No longer exists
+s&\$\{PANDORASDK\}&PANDORASDK&;
+s&\$\{PANDORAMONITORING\}&PANDORAMONITORING&;
 s&\$\{ROOT_CINT\}&&; # No longer exists
 s&\$\{ROOT_CORE\}&ROOT::Core&;
 s&\$\{ROOT_EG\}&ROOT::EG&;
@@ -88,7 +100,7 @@ s&\$\{ROOTSYS\}/lib/libEGPythia6.so&ROOT::EGPythia6&;
 s&\$\{LIBWDA\}&LIBWDA&;
 s&\$\{PQ\}&PQ&;
 s&\$\{CRY\}&CRY&;
-s&\$\{CLHEP\}&CLHEP&;
+s&\$\{CLHEP\}&CLHEP::CLHEP&;
 s&\$\{GSL\}&GSL&;
 s&\$\{XML2\}&XML2&;
 s&\$\{IFDH\}&IFDH&;
@@ -96,6 +108,8 @@ s&\$\{IFDH_SERVICE\}&IFDH_SERVICE&;
 s&\$\{LOG4CPP\}&LOG4CPP&;
 s&\$\{PYTHIA6\}&PYTHIA6&;
 s&\$\{LHAPDF\}&LHAPDF&;
+s&\$\{SQLITE\}&SQLITE&;
+s&\$\{SQLITE3\}&SQLITE&;
 s&\$\{G4FR\}&G4FR&;
 s&\$\{G4GMOCREN\}&G4GMOCREN&;
 s&\$\{G4RAYTRACER\}&G4RAYTRACER&;
@@ -104,7 +118,9 @@ s&\$\{G4VRML\}&G4VRML&;
 s&\$\{G4EVENT\}&G4EVENT&;
 s&\$\{G4GEOMETRY\}&G4GEOMETRY&;
 s&\$\{G4GLOBAL\}&G4GLOBAL&;
+s&\$\{G4GRAPHICS_REPS\}&G4GRAPHICS_REPS&;
 s&\$\{G4INTERCOMS\}&G4INTERCOMS&;
+s&\$\{G4INTERFACES\}&G4INTERFACES&;
 s&\$\{G4MATERIALS\}&G4MATERIALS&;
 s&\$\{G4MODELING\}&G4MODELING&;
 s&\$\{G4PARTICLES\}&G4PARTICLES&;
@@ -113,9 +129,11 @@ s&\$\{G4PHYSICSLISTS\}&G4PHYSICSLISTS&;
 s&\$\{G4PROCESSES\}&G4PROCESSES&;
 s&\$\{G4READOUT\}&G4READOUT&;
 s&\$\{G4RUN\}&G4RUN&;
+s&\$\{G4TRACK\}&G4TRACK&;
 s&\$\{G4TRACKING\}&G4TRACKING&;
 s&\$\{G4VISHEPREP\}&G4VISHEPREP&;
 s&\$\{G4VIS_MANAGEMENT\}&G4VIS_MANAGEMENT&;
+s&\$\{G4DIGITS_HITS\}&G4DIGITS_HITS&;
 s&\$\{XERCESC\}&XERCESC&;
 s&\$\{GFWMSG\}&GFWMSG&;
 s&\$\{GFWREG\}&GFWREG&;
@@ -169,3 +187,10 @@ s&\$\{GRWCLC\}&GRWCLC&;
 s&\$\{BLAS\}&BLAS&;
 s&\$\{DK2NU_TREE\}&DK2NU_TREE&;
 s&\$\{DK2NU_GENIE\}&DK2NU_GENIE&;
+s&\$\{TENSORFLOW\}&TENSORFLOW&;
+s&\$\{PROTOBUF\}&PROTOBUF&;
+s&\$\{GRPC_CLIENT\}&TRITON::grpcclient&;
+s&\$\{MARLEY\}&MARLEY&;
+s&\$\{MARLEY_ROOT\}&MARLEY_ROOT&;
+s&\$\{BXDECAY0\}&BXDECAY0&;
+s&\$\{JSONCPP\}&JSONCPP&;
diff --git a/tools/cetbuildtools8/update_cmake_g4.pl b/tools/cetbuildtools8/update_cmake_g4.pl
new file mode 100755
index 0000000..0e3a64d
--- /dev/null
+++ b/tools/cetbuildtools8/update_cmake_g4.pl
@@ -0,0 +1,66 @@
+use strict;
+
+use vars qw(%dir_list);
+BEGIN { %dir_list = (
+  "G4EVENT" => "Geant4::G4event",
+  "G4GEOMETRY" => "Geant4::G4geometry",
+  "G4GLOBAL" => "Geant4::G4global",
+  "G4INTERCOMS" => "Geant4::G4intercoms",
+  "G4MATERIALS" => "Geant4::G4materials",
+  "G4MODELING" => "Geant4::G4modeling",
+  "G4PARTICLES" => "Geant4::G4particles",
+  "G4PERSISTENCY" => "Geant4::G4persistency",
+  "G4PHYSICSLISTS" => "Geant4::G4physicslists",
+  "G4PROCESSES" => "Geant4::G4processes",
+  "G4READOUT" => "Geant4::G4readout",
+  "G4RUN" => "Geant4::G4run",
+  "G4TRACKING" => "Geant4::G4tracking",
+  "G4FR" => "Geant4::G4FR",
+  "G4GMOCREN" => "Geant4::G4GMocren",
+  "G4RAYTRACER" => "Geant4::G4RayTracer",
+  "G4TREE" => "Geant4::G4Tree",
+  "G4VRML" => "Geant4::G4VRML",
+  "G4VISHEPREP" => "Geant4::G4visHepRep",
+  "G4VIS_MANAGEMENT" => "Geant4::G4vis_management",
+  "XERCESC" => "XercesC::XercesC"
+                       ); }
+
+foreach my $lib (sort keys %dir_list) {
+   next if m&add_subdirectory&i;
+   next if m&find_ups_product&i;
+   next if m&simple_plugin&i;
+   next if m&create_version_variables&i;
+   next if m&SUBDIRNAME&i;
+   next if m&SUBDIRS&i;
+   next if m&LIBRARY_NAME&i;
+   next if m&PACKAGE&i;
+   next if m&fhiclcpp::fhiclcpp&i;
+   next if m&canvas::canvas&i;
+   next if m&cetlib::cetlib&i;
+   next if m&cetlib_except::cetlib_except&i;
+   next if m&messagefacility::MF&i;
+  #s&\b\Q${lib}\E([^\.\s]*\b)([^\.]|$)&$dir_list{$lib}${1}${2}&g and last;
+  s&\b\Q${lib}\E\b([^\.]|$)&$dir_list{$lib}${1}${2}&g and last;
+}
+
+s&\$\{G4FR\}&G4FR&;
+s&\$\{G4GMOCREN\}&G4GMOCREN&;
+s&\$\{G4RAYTRACER\}&G4RAYTRACER&;
+s&\$\{G4TREE\}&G4TREE&;
+s&\$\{G4VRML\}&G4VRML&;
+s&\$\{G4EVENT\}&G4EVENT&;
+s&\$\{G4GEOMETRY\}&G4GEOMETRY&;
+s&\$\{G4GLOBAL\}&G4GLOBAL&;
+s&\$\{G4INTERCOMS\}&G4INTERCOMS&;
+s&\$\{G4MATERIALS\}&G4MATERIALS&;
+s&\$\{G4MODELING\}&G4MODELING&;
+s&\$\{G4PARTICLES\}&G4PARTICLES&;
+s&\$\{G4PERSISTENCY\}&G4PERSISTENCY&;
+s&\$\{G4PHYSICSLISTS\}&G4PHYSICSLISTS&;
+s&\$\{G4PROCESSES\}&G4PROCESSES&;
+s&\$\{G4READOUT\}&G4READOUT&;
+s&\$\{G4RUN\}&G4RUN&;
+s&\$\{G4TRACKING\}&G4TRACKING&;
+s&\$\{G4VISHEPREP\}&G4VISHEPREP&;
+s&\$\{G4VIS_MANAGEMENT\}&G4VIS_MANAGEMENT&;
+s&\$\{XERCESC\}&XERCESC&;
diff --git a/tools/cetbuildtools8/update_g4.sh b/tools/cetbuildtools8/update_g4.sh
new file mode 100755
index 0000000..212b1ce
--- /dev/null
+++ b/tools/cetbuildtools8/update_g4.sh
@@ -0,0 +1,96 @@
+#!/bin/bash
+# Program name
+prog=${0##*/}
+# ======================================================================
+function usage() {
+    cat 1>&2 <<EOF
+usage: $prog [--one-file <file>] <top-dir>
+EOF
+}
+
+get_this_dir() 
+{
+    ( cd / ; /bin/pwd -P ) >/dev/null 2>&1
+    if (( $? == 0 )); then
+      pwd_P_arg="-P"
+    fi
+    reldir=`dirname ${0}`
+    thisdir=`cd ${reldir} && /bin/pwd ${pwd_P_arg}`
+}
+
+##function one_file() {
+##  local F=$1
+##  printf "$F \n"
+##  # Optionally fix whitespace
+##  (( ${fix_whitespace:-0} )) && ed "$F" < fix-whitespace.ed > /dev/null 2>&1
+##  # Fix includes 
+##  perl -wapi\~ -f ${thisdir}/fix-header-locs-nutools.pl "${F}" >/dev/null 2>&1 && rm -f "${F}~"
+##}
+
+function cmake_file() {
+  local F=$1
+  printf "$F \n"
+  # Optionally fix whitespace
+  (( ${fix_whitespace:-0} )) && ed "$F" < fix-whitespace.ed > /dev/null 2>&1
+  # Fix CMakeLists.txt 
+  perl -wapi\~ -f ${thisdir}/update_cmake_g4.pl "${F}" >/dev/null 2>&1 && rm -f "${F}~"
+}
+
+# ======================================================================
+# Prepare:
+getopt -T >/dev/null 2>&1
+if (( $? != 4 )); then
+  echo "ERROR: GNU getopt required! Check SETUP_GETOPT and PATH." 1>&2
+  exit 1
+fi
+
+TEMP=`getopt -n "$prog" -o a --long all-lumi-cases --long one-file: --long no-fix-pset -- "${@}"`
+eval set -- "$TEMP"
+while true; do
+  case $1 in
+    --fix-whitespace)
+      fix_whitespace=1
+      shift
+      ;;
+    --one-file)
+      file=$2
+      shift 2
+      ;;
+    --)
+      shift
+      break
+      ;;
+    *)
+      echo "Bad argument \"$OPT\"" 1>&2
+      usage
+      exit 1
+    esac
+done
+
+TOP=${1}
+
+get_this_dir
+
+# ======================================================================
+# Run scripts to update
+
+TMP=`mktemp -t update_sources.sh.XXXXXX`
+trap "rm $TMP* 2>/dev/null" EXIT
+
+if [[ -n "${file}" ]]; then
+  if ! [[ -r "${file}" ]]; then
+    echo "ERROR: ${file} does not exist or is not readable." 1>&2
+    exit 1
+  else
+    cmake_file "$file"
+  fi
+else
+##  for F in `find $TOP \( -name "*.c*" -o -name "*.C*" -o -name "*.icc" -o -name "*.h*" -o -name "*.H*" \) -print`; do
+##    one_file "$F"
+##  done
+##  echo
+  for F in `find $TOP -name CMakeLists.txt -print`; do
+    cmake_file "$F"
+  done
+  echo
+fi
