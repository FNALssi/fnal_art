diff -Naur src/clients/c++/library/cmake/TRTISConfig.cmake.in src/clients/c++/library/cmake/TRTISConfig.cmake.in
--- a/src/clients/c++/library/cmake/TRITONConfig.cmake.in  10:22:34.000000000 -0600
+++ b/src/clients/c++/library/cmake/TRITONConfig.cmake.in  11:41:12.327965857 -0600
@@ -27,7 +27,7 @@
 # specific version required for protobuf
 if(NOT PROTOBUF_FOUND AND NOT Protobuf_FOUND)
   set(protobuf_MODULE_COMPATIBLE TRUE CACHE BOOL "protobuf_MODULE_COMPATIBLE" FORCE)
-  find_package(Protobuf @Protobuf_VERSION@ CONFIG REQUIRED)
+  find_package(Protobuf @Protobuf_VERSION@)
 endif()
 
 # specific version required for grpc
--- server-2.6.0/build/CMakeLists.txt	2020-12-17 17:39:05.000000000 -0600
+++ spack-src/build/CMakeLists.txt	2021-02-01 11:05:41.346134262 -0600
@@ -129,132 +129,42 @@
   set(_CMAKE_ARGS_OPENSSL_ROOT_DIR "-DOPENSSL_ROOT_DIR:PATH=${OPENSSL_ROOT_DIR}")
 endif()
 
-
-#
-# Get the protobuf and grpc source
-#
-ExternalProject_Add(grpc-repo
-  PREFIX grpc-repo
-  GIT_REPOSITORY "https://github.com/grpc/grpc.git"
-  GIT_TAG "v1.25.0"
-  SOURCE_DIR "${CMAKE_CURRENT_BINARY_DIR}/grpc-repo/src/grpc"
-  CONFIGURE_COMMAND ""
-  BUILD_COMMAND ""
-  INSTALL_COMMAND ""
-  TEST_COMMAND ""
-)
-
-#
-# Build protobuf project from grpc-repo
-#
-# Use -DCMAKE_BUILD_TYPE:STRING=RELEASE to workaround the protobuf build issue
-# described in https://stackoverflow.com/a/60218066/2091555
-ExternalProject_Add(protobuf
-  PREFIX protobuf
-  SOURCE_DIR "${CMAKE_CURRENT_BINARY_DIR}/grpc-repo/src/grpc/third_party/protobuf/cmake"
-  DOWNLOAD_COMMAND ""
-  CMAKE_CACHE_ARGS
-    -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
-    -Dprotobuf_BUILD_TESTS:BOOL=OFF
-    -Dprotobuf_WITH_ZLIB:BOOL=OFF
-    -Dprotobuf_MSVC_STATIC_RUNTIME:BOOL=OFF
-    -DCMAKE_BUILD_TYPE:STRING=RELEASE
-    -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/protobuf
-  DEPENDS grpc-repo
-)
-
-#
-# Build googletest project from grpc-repo
-#
-ExternalProject_Add(googletest
-  PREFIX protobuf
-  SOURCE_DIR "${CMAKE_CURRENT_BINARY_DIR}/grpc-repo/src/grpc/third_party/googletest"
-  DOWNLOAD_COMMAND ""
-  CMAKE_CACHE_ARGS
-    -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
-    -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/googletest
-  DEPENDS grpc-repo
-)
-
-# Location where protobuf-config.cmake will be installed varies by
-# platform
-if (WIN32)
-  set(_FINDPACKAGE_PROTOBUF_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/protobuf/cmake")
-else()
-  set(_FINDPACKAGE_PROTOBUF_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/protobuf/${CMAKE_INSTALL_LIBDIR}/cmake/protobuf")
-endif()
-
-#
-# Build c-area project from grpc-repo
-#
-ExternalProject_Add(c-ares
-  PREFIX c-ares
-  SOURCE_DIR "${CMAKE_CURRENT_BINARY_DIR}/grpc-repo/src/grpc/third_party/cares/cares"
-  DOWNLOAD_COMMAND ""
-  CMAKE_CACHE_ARGS
-    -DCARES_SHARED:BOOL=OFF
-    -DCARES_STATIC:BOOL=ON
-    -DCARES_STATIC_PIC:BOOL=ON
-    -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
-    -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/c-ares
-  DEPENDS grpc-repo
-)
-
-#
-# Build GRPC
-#
-ExternalProject_Add(grpc
-  PREFIX grpc
-  SOURCE_DIR "${CMAKE_CURRENT_BINARY_DIR}/grpc-repo/src/grpc"
-  DOWNLOAD_COMMAND ""
-  CMAKE_CACHE_ARGS
-    -DgRPC_INSTALL:BOOL=ON
-    -DgRPC_BUILD_TESTS:BOOL=OFF
-    -DgRPC_PROTOBUF_PROVIDER:STRING=package
-    -DgRPC_PROTOBUF_PACKAGE_TYPE:STRING=CONFIG
-    -DProtobuf_DIR:PATH=${_FINDPACKAGE_PROTOBUF_CONFIG_DIR}
-    -DgRPC_ZLIB_PROVIDER:STRING=package
-    -DgRPC_CARES_PROVIDER:STRING=package
-    -Dc-ares_DIR:PATH=${CMAKE_CURRENT_BINARY_DIR}/c-ares/lib/cmake/c-ares
-    -DgRPC_SSL_PROVIDER:STRING=package
-    ${_CMAKE_ARGS_OPENSSL_ROOT_DIR}
-    -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
-    -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/grpc
-  DEPENDS grpc-repo c-ares protobuf
-)
-
-#
-# Build libcurl
-#
-ExternalProject_Add(curl
-  PREFIX curl
-  GIT_REPOSITORY "https://github.com/curl/curl.git"
-  GIT_TAG "curl-7_66_0"
-  SOURCE_DIR "${CMAKE_CURRENT_BINARY_DIR}/curl/src/curl"
-  CMAKE_CACHE_ARGS
-    -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
-    -DBUILD_CURL_EXE:BOOL=OFF
-    -DBUILD_SHARED_LIBS:BOOL=OFF
-    -DCURL_STATICLIB:BOOL=ON
-    -DHTTP_ONLY:BOOL=ON
-    -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
-    -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/curl/install
-)
+find_package(c-ares)
+find_package(protobuf)
+find_package(GTest)
+add_library(googletest ALIAS GTest::gtest)
+
+find_package(gRPC REQUIRED)
+add_library(grpc ALIAS gRPC::grpc)
+
+pkg_check_modules(libcurl REQUIRED libcurl)
+add_library(curl INTERFACE IMPORTED)
+set_target_properties(curl PROPERTIES
+        INTERFACE_INCLUDE_DIRECTORIES "${LIBCURL_INCLUDE_DIRS}"
+        INTERFACE_LINK_LIBRARIES "${LIBCURL_LIBRARIES}"
+        INTERFACE_COMPILE_OPTIONS "${LIBCURL_CFLAGS_OTHER}")
+
+pkg_check_modules(pkg_libevent libevent)
+add_library(libevent INTERFACE IMPORTED)
+set_target_properties(curl PROPERTIES
+        INTERFACE_INCLUDE_DIRECTORIES "${PKG_LIBEVENT_INCLUDE_DIRS}"
+        INTERFACE_LINK_LIBRARIES "${PKG_LIBEVENT_LIBRARIES}"
+        INTERFACE_COMPILE_OPTIONS "${PKG_LIBEVENT_CFLAGS_OTHER}")
 
 #
 # Build libevent
 #
-ExternalProject_Add(libevent
-  PREFIX libevent
-  GIT_REPOSITORY "https://github.com/libevent/libevent.git"
-  GIT_TAG "release-2.1.8-stable"
-  SOURCE_DIR "${CMAKE_CURRENT_BINARY_DIR}/libevent/src/libevent"
-  CMAKE_CACHE_ARGS
-    -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
-    -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
-    -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/libevent/install
-)
-
+#ExternalProject_Add(libevent
+#  PREFIX libevent
+#  GIT_REPOSITORY "https://github.com/libevent/libevent.git"
+#  GIT_TAG "release-2.1.8-stable"
+#  SOURCE_DIR "${CMAKE_CURRENT_BINARY_DIR}/libevent/src/libevent"
+#  CMAKE_CACHE_ARGS
+#    -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
+#    -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
+#    -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/libevent/install
+#)
+#
 #
 # Get patched third party repo
 #
@@ -304,7 +214,7 @@
     -DLibevent_DIR:PATH=${CMAKE_CURRENT_BINARY_DIR}/libevent/install/lib/cmake/libevent
     -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
     -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/libevhtp/install
-  DEPENDS libevent third-party-repo
+  DEPENDS third-party-repo
 )
 endif()
 
@@ -349,7 +259,8 @@
    ${CMAKE_CURRENT_BINARY_DIR}/c-ares/lib/cmake/c-ares
    ${CMAKE_CURRENT_BINARY_DIR}/grpc/lib/cmake/grpc
    ${CMAKE_CURRENT_BINARY_DIR}/crc32c/lib/cmake/Crc32c
-   ${_FINDPACKAGE_PROTOBUF_CONFIG_DIR})
+   )
+#   ${_FINDPACKAGE_PROTOBUF_CONFIG_DIR})
 
 #
 # Build google-cloud-cpp
@@ -365,7 +276,7 @@
     -DCMAKE_PREFIX_PATH:PATH=${GCS_CMAKE_PREFIX_PATH}
     -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
     -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/google-cloud-cpp/install
-  DEPENDS grpc protobuf crc32c
+  DEPENDS grpc crc32c
 )
 
 #
@@ -380,8 +291,6 @@
     -DBUILD_SHARED_LIBS:BOOL=OFF
     -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
     -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
-    -DCURL_INCLUDE_DIR=${CMAKE_CURRENT_BINARY_DIR}/curl/install/include
-    -DCURL_LIBRARY=${CMAKE_CURRENT_BINARY_DIR}/curl/install/lib
     -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/azure-storage-cpplite/install
   DEPENDS curl
 )
@@ -431,8 +340,6 @@
   BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/test-util"
   BUILD_ALWAYS 1
   CMAKE_CACHE_ARGS
-    -DProtobuf_DIR:PATH=${_FINDPACKAGE_PROTOBUF_CONFIG_DIR}
-    -DGTEST_ROOT:PATH=${CMAKE_CURRENT_BINARY_DIR}/googletest
     -DCNMEM_PATH:PATH=${CMAKE_CURRENT_BINARY_DIR}/cnmem
     -DTRITON_COMMON_REPO_TAG:STRING=${TRITON_COMMON_REPO_TAG}
     -DTRITON_CORE_REPO_TAG:STRING=${TRITON_CORE_REPO_TAG}
@@ -441,7 +348,7 @@
     -DTRITON_ENABLE_TENSORRT:BOOL=${TRITON_ENABLE_TENSORRT}
     -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
     -DCMAKE_INSTALL_PREFIX:PATH=${TRITON_TEST_UTILS_INSTALL_PREFIX}
-  DEPENDS protobuf googletest cnmem
+  DEPENDS cnmem
 )
 
 #
@@ -483,7 +390,6 @@
     -DTRITON_ENABLE_GPU:BOOL=${TRITON_ENABLE_GPU}
     -DCMAKE_INSTALL_PREFIX:PATH=${TRITON_CLIENTS_INSTALL_PREFIX}
     -DTRITON_VERSION:STRING=${TRITON_VERSION}
-  DEPENDS curl protobuf grpc
 )
 
 #
@@ -495,7 +401,6 @@
   set(TRITON_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
 endif()
 
-set(TRITON_DEPENDS protobuf)
 if(${TRITON_ENABLE_GCS})
   set(TRITON_DEPENDS ${TRITON_DEPENDS} google-cloud-cpp)
 endif() # TRITON_ENABLE_GCS
